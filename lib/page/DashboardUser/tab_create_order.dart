import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';
import 'package:latlong2/latlong.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:delivery_frontend/page/map_picker_page.dart';

class CreateOrderForm extends StatefulWidget {
  final VoidCallback? onOrderCreated;
  const CreateOrderForm({super.key, this.onOrderCreated});

  @override
  State<CreateOrderForm> createState() => _CreateOrderFormState();
}

class _CreateOrderFormState extends State<CreateOrderForm> {
  final _pickupAddressCtl = TextEditingController();
  final _dropAddressCtl = TextEditingController();
  final _detailCtl = TextEditingController();
  final _priceCtl = TextEditingController();

  File? _imageFile;
  LatLng? _pickupLatLng;
  LatLng? _dropLatLng;
  bool _loading = false;

  // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  Future<String> _getAddressFromLatLng(double lat, double lng) async {
    try {
      final placemarks = await placemarkFromCoordinates(lat, lng);
      if (placemarks.isNotEmpty) {
        final p = placemarks.first;
        return "${p.street ?? ''} ${p.subLocality ?? ''} ${p.locality ?? ''} ${p.administrativeArea ?? ''}"
            .trim();
      }
      return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà";
    } catch (e) {
      debugPrint("‚ùå Reverse geocode error: $e");
      return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ";
    }
  }

  // üìç ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Future<void> _getCurrentLocation(bool isPickup) async {
    try {
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
      }
      if (permission == LocationPermission.deniedForever) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Location ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ")),
        );
        return;
      }

      final pos = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high);
      final address = await _getAddressFromLatLng(pos.latitude, pos.longitude);
      setState(() {
        final latLng = LatLng(pos.latitude, pos.longitude);
        if (isPickup) {
          _pickupLatLng = latLng;
          _pickupAddressCtl.text = address;
        } else {
          _dropLatLng = latLng;
          _dropAddressCtl.text = address;
        }
      });
    } catch (e) {
      debugPrint("‚ö†Ô∏è GPS error: $e");
    }
  }

  // üó∫Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  Future<void> _openMapPicker(bool isPickup) async {
    await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => MapPickerPage(
          onPositionSelected: (pos) async {
            final address =
                await _getAddressFromLatLng(pos.latitude, pos.longitude);
            setState(() {
              if (isPickup) {
                _pickupLatLng = pos;
                _pickupAddressCtl.text = address;
              } else {
                _dropLatLng = pos;
                _dropAddressCtl.text = address;
              }
            });
          },
        ),
      ),
    );
  }

  // üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏û‡∏±‡∏™‡∏î‡∏∏
  Future<void> _pickImage() async {
    final picked = await ImagePicker().pickImage(source: ImageSource.camera);
    if (picked != null) setState(() => _imageFile = File(picked.path));
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Firestore
  Future<void> _selectReceiverFromList() async {
    final snapshot =
        await FirebaseFirestore.instance.collection('receivers').get();

    showModalBottomSheet(
      context: context,
      builder: (context) => ListView(
        children: snapshot.docs.map((doc) {
          final data = doc.data();
          return ListTile(
            title: Text(data['name'] ?? ''),
            subtitle: Text("${data['phone'] ?? ''} ‚Ä¢ ${data['address'] ?? ''}"),
            onTap: () {
              Navigator.pop(context);
              setState(() {
                _dropAddressCtl.text = data['address'] ?? '';
                if (data['lat'] != null && data['lng'] != null) {
                  _dropLatLng = LatLng(data['lat'], data['lng']);
                }
              });
            },
          );
        }).toList(),
      ),
    );
  }

  // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
  Future<void> _searchReceiverByPhone() async {
    String? inputPhone = await showDialog<String>(
      context: context,
      builder: (context) {
        String phone = '';
        return AlertDialog(
          title: const Text("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"),
          content: TextField(
            keyboardType: TextInputType.phone,
            onChanged: (val) => phone = val,
            decoration: const InputDecoration(hintText: "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"),
          ),
          actions: [
            TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")),
            TextButton(
                onPressed: () => Navigator.pop(context, phone),
                child: const Text("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")),
          ],
        );
      },
    );

    if (inputPhone == null || inputPhone.isEmpty) return;

    final query = await FirebaseFirestore.instance
        .collection('receivers')
        .where('phone', isEqualTo: inputPhone)
        .get();

    if (query.docs.isEmpty) {
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ô‡∏µ‡πâ")));
      return;
    }

    final data = query.docs.first.data();
    setState(() {
      _dropAddressCtl.text = data['address'] ?? '';
      if (data['lat'] != null && data['lng'] != null) {
        _dropLatLng = LatLng(data['lat'], data['lng']);
      }
    });
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore
  Future<void> saveDeliveryRecord({
    required String userId,
    required String pickupAddress,
    required String dropAddress,
    required double price,
    String? details,
    LatLng? pickupLatLng,
    LatLng? dropLatLng,
  }) async {
    await FirebaseFirestore.instance.collection("deliveryRecords").add({
      "userId": userId,
      "pickupAddress": pickupAddress,
      "pickupLatLng": pickupLatLng != null
          ? "${pickupLatLng.latitude},${pickupLatLng.longitude}"
          : "-",
      "dropAddress": dropAddress,
      "dropLatLng": dropLatLng != null
          ? "${dropLatLng.latitude},${dropLatLng.longitude}"
          : "-",
      "details": details ?? "",
      "price": price,
      "status": "‡∏£‡∏≠‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô",
      "createdAt": FieldValue.serverTimestamp(),
    });
  }

  Future<void> _createOrder() async {
    if (_pickupAddressCtl.text.isEmpty ||
        _dropAddressCtl.text.isEmpty ||
        _priceCtl.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")));
      return;
    }

    setState(() => _loading = true);
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) throw Exception("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");

      await saveDeliveryRecord(
        userId: user.uid,
        pickupAddress: _pickupAddressCtl.text,
        dropAddress: _dropAddressCtl.text,
        details: _detailCtl.text,
        price: double.tryParse(_priceCtl.text) ?? 0.0,
        pickupLatLng: _pickupLatLng,
        dropLatLng: _dropLatLng,
      );

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")),
      );
      widget.onOrderCreated?.call();
    } catch (e) {
      debugPrint("‚ùå Error: $e");
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e")));
    }
    setState(() => _loading = false);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
          title: const Text("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà"), backgroundColor: Colors.green),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
          _buildAddressSection("‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", _pickupAddressCtl, true),
          const SizedBox(height: 20),
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: _selectReceiverFromList,
                icon: const Icon(Icons.person_search),
                label: const Text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
              ),
              const SizedBox(width: 10),
              TextButton.icon(
                onPressed: _searchReceiverByPhone,
                icon: const Icon(Icons.search, color: Colors.green),
                label: const Text("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
                    style: TextStyle(color: Colors.green)),
              ),
            ],
          ),
          const SizedBox(height: 10),
          _buildAddressSection("‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö)", _dropAddressCtl, false),

          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡∏Ç‡πâ‡∏≠ 2.1.4)
          if (_dropLatLng != null)
            Container(
              margin: const EdgeInsets.only(top: 12),
              height: 180,
              decoration:
                  BoxDecoration(border: Border.all(color: Colors.green)),
              child: FlutterMap(
                options:
                    MapOptions(initialCenter: _dropLatLng!, initialZoom: 15),
                children: [
                  TileLayer(
                    urlTemplate:
                        'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                    userAgentPackageName: 'com.delivery_frontend',
                  ),
                  MarkerLayer(markers: [
                    Marker(
                      point: _dropLatLng!,
                      width: 50,
                      height: 50,
                      child: const Icon(Icons.location_pin,
                          color: Colors.red, size: 40),
                    ),
                  ]),
                ],
              ),
            ),

          const SizedBox(height: 20),
          _buildTitle("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"),
          TextField(
            controller: _detailCtl,
            maxLines: 3,
            decoration: const InputDecoration(
              hintText: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏±‡∏™‡∏î‡∏∏, ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
              border: OutlineInputBorder(),
            ),
          ),
          const SizedBox(height: 20),
          _buildTitle("‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏±‡∏™‡∏î‡∏∏"),
          GestureDetector(
            onTap: _pickImage,
            child: Container(
              height: 100,
              width: double.infinity,
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey),
                borderRadius: BorderRadius.circular(8),
              ),
              child: _imageFile != null
                  ? Image.file(_imageFile!, fit: BoxFit.cover)
                  : const Center(child: Text("‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏û‡∏±‡∏™‡∏î‡∏∏")),
            ),
          ),
          const SizedBox(height: 20),
          _buildTitle("‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"),
          TextField(
            controller: _priceCtl,
            keyboardType: TextInputType.number,
            decoration: const InputDecoration(
              hintText: "‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)",
              border: OutlineInputBorder(),
            ),
          ),
          const SizedBox(height: 30),
          Row(mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [
            ElevatedButton(
              onPressed: _loading ? null : () => Navigator.pop(context),
              style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.grey,
                  minimumSize: const Size(130, 45)),
              child: const Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"),
            ),
            ElevatedButton(
              onPressed: _loading ? null : _createOrder,
              style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  minimumSize: const Size(130, 45)),
              child: _loading
                  ? const CircularProgressIndicator(color: Colors.white)
                  : const Text("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"),
            ),
          ]),
        ]),
      ),
    );
  }

  // üéØ ‡∏™‡πà‡∏ß‡∏ô UI ‡∏¢‡πà‡∏≠‡∏¢
  Widget _buildTitle(String text) => Padding(
        padding: const EdgeInsets.only(bottom: 6),
        child: Text(text,
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
      );

  Widget _buildAddressSection(
      String title, TextEditingController ctl, bool isPickup) {
    return Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
      _buildTitle(title),
      TextField(
        controller: ctl,
        readOnly: true,
        decoration: InputDecoration(
          hintText: "‡πÅ‡∏ï‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
          border: const OutlineInputBorder(),
          suffixIcon: Row(mainAxisSize: MainAxisSize.min, children: [
            IconButton(
              icon: const Icon(Icons.my_location, color: Colors.green),
              onPressed: () => _getCurrentLocation(isPickup),
            ),
            IconButton(
              icon: const Icon(Icons.map, color: Colors.orange),
              onPressed: () => _openMapPicker(isPickup),
            ),
          ]),
        ),
      ),
    ]);
  }
}
