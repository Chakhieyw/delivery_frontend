import 'package:delivery_frontend/page/DashboardUser/all_riders_map_page.dart';
import 'package:delivery_frontend/page/DashboardUser/tab_create_order.dart';
import 'package:delivery_frontend/page/DashboardUser/tab_history.dart';
import 'package:delivery_frontend/page/DashboardUser/tab_home.dart';
import 'package:delivery_frontend/page/DashboardUser/tab_profile.dart';
import 'package:delivery_frontend/page/DashboardUser/tab_track.dart';
import 'package:delivery_frontend/page/select_role.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:delivery_frontend/page/login_user.dart';

class DashboardUserPage extends StatefulWidget {
  const DashboardUserPage({super.key});

  @override
  State<DashboardUserPage> createState() => _DashboardUserPageState();
}

class _DashboardUserPageState extends State<DashboardUserPage>
    with SingleTickerProviderStateMixin {
  final _auth = FirebaseAuth.instance;
  late TabController _tabController;
  String? selectedOrderId;

  @override
  void initState() {
    super.initState();
    // ‚úÖ ‡∏°‡∏µ 5 ‡πÅ‡∏ó‡πá‡∏ö (Home, Track, Create, History, Profile)
    _tabController = TabController(length: 5, vsync: this);

    // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï selectedOrderId ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    _tabController.addListener(() {
      if (_tabController.index != 1 && selectedOrderId != null) {
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (mounted) {
            setState(() {
              selectedOrderId = null;
            });
          }
        });
      }
    });
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á orderId
  void goToTrackTab(String orderId) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        setState(() {
          selectedOrderId = orderId;
          _tabController.animateTo(1); // ‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"
        });
      }
    });
  }

  Future<void> _logout() async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"),
        content: const Text("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"),
        actions: [
          TextButton(
            child: const Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: TextStyle(color: Colors.grey)),
            onPressed: () => Navigator.pop(context, false),
          ),
          TextButton(
            child:
                const Text("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", style: TextStyle(color: Colors.red)),
            onPressed: () => Navigator.pop(context, true),
          ),
        ],
      ),
    );

    if (confirm != true) return;

    try {
      await FirebaseAuth.instance.signOut();
      if (!mounted) return;
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (_) => const LoginUserPage()),
        (route) => false,
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final user = _auth.currentUser;
    if (user == null) {
      return const Scaffold(
        body: Center(child: Text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")),
      );
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore
    final userStream = FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .snapshots();

    return StreamBuilder<DocumentSnapshot>(
      stream: userStream,
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        }

        final data = snapshot.data!.data() as Map<String, dynamic>? ?? {};
        final userName = data['name'] ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
        final userImage = data['imageUrl'] ?? '';

        return Scaffold(
          backgroundColor: Colors.grey.shade100,
          appBar: AppBar(
            backgroundColor: Colors.green,
            automaticallyImplyLeading: false,
            title: Row(
              children: [
                CircleAvatar(
                  backgroundColor: Colors.white,
                  backgroundImage:
                      (userImage.isNotEmpty) ? NetworkImage(userImage) : null,
                  child: userImage.isEmpty
                      ? const Icon(Icons.person, color: Colors.green)
                      : null,
                ),
                const SizedBox(width: 10),
                Text(
                  userName,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const Spacer(),
                // üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                IconButton(
                  icon: const Icon(Icons.map_outlined, color: Colors.white),
                  tooltip: "‡∏î‡∏π‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà",
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (_) => const AllRidersMapPage()),
                    );
                  },
                ),
                // üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                IconButton(
                    icon: const Icon(Icons.logout, color: Colors.white),
                    tooltip: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
                    onPressed: _logout),
              ],
            ),
            bottom: TabBar(
              controller: _tabController,
              labelColor: Colors.white,
              unselectedLabelColor: Colors.white70,
              indicatorColor: Colors.orange,
              indicatorWeight: 3,
              tabs: const [
                Tab(icon: Icon(Icons.home), text: "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"),
                Tab(icon: Icon(Icons.location_on), text: "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"),
                Tab(icon: Icon(Icons.add_box), text: "‡∏™‡∏£‡πâ‡∏≤‡∏á"),
                Tab(icon: Icon(Icons.history), text: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"),
                Tab(icon: Icon(Icons.person), text: "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"),
              ],
            ),
          ),

          // üîπ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö
          body: TabBarView(
            controller: _tabController,
            children: [
              // ‚úÖ Home ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
              HomeTab(onTrackPressed: goToTrackTab),

              // ‚úÖ Track ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
              TrackTab(
                selectedOrderId: selectedOrderId,
              ),

              // ‚úÖ Create ‚Äî ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
              CreateOrderForm(
                onOrderCreated: () {
                  setState(() {
                    _tabController.animateTo(0); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home
                  });
                },
              ),

              // ‚úÖ History ‚Äî ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              const HistoryTab(),

              // ‚úÖ Profile ‚Äî ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
              const ProfileTab(),
            ],
          ),
        );
      },
    );
  }
}
